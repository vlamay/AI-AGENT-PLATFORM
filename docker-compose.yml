version: '3.8'

services:
  # ============================================
  # AI ORCHESTRATION SERVICE
  # ============================================
  orchestrator:
    build: ./services/orchestrator
    container_name: ai-orchestrator
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgresql://ai_user:ai_pass@postgres:5432/ai_agents
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - OLLAMA_ENDPOINT=http://ollama:11434
      - QDRANT_URL=http://qdrant:6333
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
      - JWT_SECRET=${JWT_SECRET:-dev-secret-change-in-prod}
      - ENVIRONMENT=development
    depends_on:
      - postgres
      - redis
      - rabbitmq
      - qdrant
      - ollama
    volumes:
      - ./services/orchestrator:/app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================
  # OLLAMA LOCAL LLM SERVICE
  # ============================================
  ollama:
    image: ollama/ollama:latest
    container_name: ollama-llm
    ports:
      - "11434:11434"
    volumes:
      - ollama_models:/root/.ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped

  # ============================================
  # VECTOR DATABASE (RAG)
  # ============================================
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: qdrant-vectordb
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_storage:/qdrant/storage
    environment:
      - QDRANT__SERVICE__GRPC_PORT=6334
    restart: unless-stopped

  # ============================================
  # POSTGRESQL DATABASE
  # ============================================
  postgres:
    image: postgres:16-alpine
    container_name: postgres-db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=ai_agents
      - POSTGRES_USER=ai_user
      - POSTGRES_PASSWORD=ai_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================
  # REDIS CACHE & RATE LIMITING
  # ============================================
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis_pass
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # ============================================
  # RABBITMQ MESSAGE QUEUE
  # ============================================
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: rabbitmq-mq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped

  # ============================================
  # CELERY WORKER (Background Tasks)
  # ============================================
  celery-worker:
    build: ./services/orchestrator
    container_name: celery-worker
    command: celery -A app.tasks.celery_app worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://ai_user:ai_pass@postgres:5432/ai_agents
      - REDIS_URL=redis://:redis_pass@redis:6379/0
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - OLLAMA_ENDPOINT=http://ollama:11434
    depends_on:
      - postgres
      - redis
      - rabbitmq
    volumes:
      - ./services/orchestrator:/app
    restart: unless-stopped

  # ============================================
  # ANALYTICS WORKER (Conversation Insights)
  # ============================================
  analytics-worker:
    build: ./services/analytics-worker
    container_name: analytics-worker
    environment:
      - DATABASE_URL=postgresql://ai_user:ai_pass@postgres:5432/ai_agents
      - REDIS_URL=redis://:redis_pass@redis:6379/0
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    depends_on:
      - postgres
      - redis
      - rabbitmq
    volumes:
      - ./services/analytics-worker:/app
    restart: unless-stopped

  # ============================================
  # EMAIL PROCESSING SERVICE
  # ============================================
  email-processor:
    build: ./services/email-processor
    container_name: email-processor
    environment:
      - DATABASE_URL=postgresql://ai_user:ai_pass@postgres:5432/ai_agents
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - OLLAMA_ENDPOINT=http://ollama:11434
    depends_on:
      - postgres
      - rabbitmq
      - ollama
    volumes:
      - ./services/email-processor:/app
    restart: unless-stopped

  # ============================================
  # DIGITAL HUMAN SERVICE (Avatar)
  # ============================================
  digital-human:
    build: ./services/digital-human
    container_name: digital-human
    ports:
      - "8090:8090"
    environment:
      - ORCHESTRATOR_URL=http://orchestrator:8080
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - HEYGEN_API_KEY=${HEYGEN_API_KEY}
    depends_on:
      - orchestrator
    volumes:
      - ./services/digital-human:/app
    restart: unless-stopped

  # ============================================
  # NEXT.JS FRONTEND
  # ============================================
  frontend:
    build: ./frontend
    container_name: frontend-app
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NEXT_PUBLIC_WS_URL=ws://localhost:8080
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-dev-secret}
      - NEXTAUTH_URL=http://localhost:3000
    depends_on:
      - orchestrator
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  ollama_models:
  qdrant_storage:

networks:
  default:
    name: ai-agent-network
